# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #Let's add guzzle client into container because we will need to inject it into our geocoding components because
    #we need this to be mockable because we don't want to send actual requests when we run tests.
    GuzzleHttp\Client:
        autowire: true
        autoconfigure: true

    #let's tag all geocoders as we will need them in wholestack strategy
    App\Service\Geocoder\:
        resource: '../src/Service/Geocoder/*'
        tags: [ 'app.geocoder' ]
        exclude: '../src/Service/Geocoder/*Interface.php'

    #wholestack strategy injects all geocoders into an array. To add a new geocoder into Wholes-tack strategy simply
    #create a new geocoder class that implements the same interface as the rest. No more changes needed.
    App\Service\GeocoderStrategy\WholeStackStrategy:
        autowire: true
        autoconfigure: true
        bind:
            $geocoders: !tagged_iterator app.geocoder

    #swith between strategies by uncommenting only one injected parameter.
    #Controller does not care about the strategy that we are using. It only cares that it has a specific functions that
    #we are calling aka the interface that the strategy implements. To create a new strategy simply add a class file and
    #then replace this configuration argument $geocoderService by created strategy. No more changes needed.
    App\Controller\CoordinatesController:
        arguments:
            $geocoderService: '@App\Service\GeocoderStrategy\WholeStackStrategy'
            #$geocoderService: '@App\Service\GeocoderStrategy\GoogleStrategy'
            #$geocoderService: '@App\Service\GeocoderStrategy\DatabasePlusHereStackStrategy'
